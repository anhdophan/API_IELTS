@{
    var teacherName = ViewData["TeacherName"]?.ToString() ?? "Gi·∫£ng vi√™n";
    var teacherAvatar = ViewData["TeacherAvatar"]?.ToString() ?? "";
}
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - L&T Education</title>
    <link rel="stylesheet" href="~/css/site-teacher.css" asp-append-version="true" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    @RenderSection("Styles", required: false)
</head>
<body>
    <header class="main-header">
        <div class="top-bar">
            <div class="container">
                <span class="welcome-text">
                    <i class="fa-regular fa-user"></i> Xin ch√†o, @teacherName!
                </span>
                <div class="user-info">
                    @if (!string.IsNullOrEmpty(teacherAvatar))
                    {
                        <img src="@teacherAvatar" alt="Avatar" class="avatar-img" />
                    }
                    else
                    {
                        <div class="user-avatar">@(teacherName.Length > 1 ? teacherName.Substring(0, 2).ToUpper() : "GV")</div>
                    }
                    <a href="/User/Teachers/Profile">H·ªì s∆°</a>
                    <a href="/User/Teachers/Logout">ƒêƒÉng xu·∫•t</a>
                </div>
            </div>
        </div>
        <nav class="header-nav">
            <div class="container">
                <div class="logo">
                    <a href="/User/Teachers/Index">
                        <img src="~/images/lt_logo.png" alt="L&T Education Logo">
                        <span>H·ªÜ TH·ªêNG GI·∫¢NG VI√äN</span>
                    </a>
                </div>
                <div class="header-controls">
                    <a href="#"><i class="fas fa-bell"></i></a>
                    <a href="/User/Teachers/Profile"><i class="fas fa-cog"></i></a>
                </div>
            </div>
        </nav>
    </header>
    <main class="main-content">
        @RenderBody()
    </main>
    <footer class="footer">
        <div class="container">
            <p>¬© 2025 L&T Education. All rights reserved.</p>
        </div>
    </footer>
 @RenderSection("Scripts", required: false)
    <!-- Chat Toggle Button -->
    <button onclick="toggleChat()" style="position:fixed; bottom:20px; right:20px; z-index:9998; background:#007bff; color:white; padding:10px 15px; border:none; border-radius:50%;">
        üí¨
    </button>

    <!-- Chat Popup -->
    <div id="chat-popup" style="position:fixed; bottom:20px; right:20px; width:300px; background:#fff; border:1px solid #ccc; border-radius:8px; display:none; z-index:9999;">
        <div style="background:#007bff; color:white; padding:8px; border-top-left-radius:8px; border-top-right-radius:8px;">
            <span id="chat-title">Chat</span>
            <button onclick="toggleChat()" style="float:right; background:transparent; border:none; color:white;">&times;</button>
        </div>
        <div id="chat-messages" style="height:250px; overflow-y:auto; padding:10px;"></div>
        <div style="padding:8px;">
            <input type="text" id="chat-input" placeholder="G·ª≠i tin nh·∫Øn..." style="width:80%;" />
            <button onclick="sendMessage()" style="width:18%;">G·ª≠i</button>
        </div>
        <div id="classmates-list" style="padding:8px; max-height:100px; overflow-y:auto; border-top:1px solid #ccc;">
            <strong>B·∫°n c√πng l·ªõp:</strong>
            <div id="user-list-container"></div>
        </div>
    </div>

   

    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-database-compat.js"></script>

    <script>
    const currentUserId = '@(Context.Session.GetString("StudentId") ?? Context.Session.GetString("TeacherId") ?? "admin")';
    const currentUserName = '@(Context.Session.GetString("StudentName") ?? Context.Session.GetString("TeacherName") ?? "Admin")';
    const userRole = '@(Context.Session.GetString("StudentId") != null ? "student" : (Context.Session.GetString("TeacherId") != null ? "teacher" : "admin"))';
    const classId = '@(Context.Session.GetString("StudentClass") ?? Context.Session.GetString("TeacherClass"))';
    const teacherClassList = @Html.Raw(Context.Session.GetString("TeacherClasses") ?? "[]");
   let teacherClassIds = [];
try {
    const parsed = JSON.parse(teacherClassList);
    teacherClassIds = Array.isArray(parsed) ? parsed : [parsed];
} catch (e) {
    teacherClassIds = [];
}

    const firebaseConfig = {
        apiKey: "AIzaSyD...",
        authDomain: "ielts-7d51b.firebaseapp.com",
        databaseURL: "https://ielts-7d51b-default-rtdb.asia-southeast1.firebasedatabase.app/",
        projectId: "ielts-7d51b",
        storageBucket: "ielts-7d51b.appspot.com",
        messagingSenderId: "xxxxxxx",
        appId: "1:xxxx:web:xxxx"
    };

    firebase.initializeApp(firebaseConfig);
    const db = firebase.database();

    let currentChatPath = "";

    window.onload = async function () {
        await saveUserPresence();
    };

    async function saveUserPresence() {
        const userRef = db.ref(`users/${currentUserId}`);
        await userRef.set({
            userId: currentUserId,
            name: currentUserName,
            role: userRole,
            classId: classId
        });

        const presenceRef = db.ref(`presence/online/${currentUserId}`);
        await presenceRef.set(true);
        presenceRef.onDisconnect().remove();
    }

    window.toggleChat = function () {
        const popup = document.getElementById("chat-popup");
        const isVisible = popup.style.display === "block";
        popup.style.display = isVisible ? "none" : "block";

        if (!isVisible) {
            if (currentChatPath === "") window.openClassChat();
            window.loadClassmates();
        }
    };

    window.openClassChat = function () {
        currentChatPath = `chats/class/${classId}`;
        const roleLabel = userRole === 'teacher' ? "L·ªõp ƒëang d·∫°y" : "L·ªõp";
        document.getElementById("chat-title").innerText = `${roleLabel} ${classId}`;
        listenForMessages();
    };

    window.openPrivateChat = function (withUserId, withUserName) {
        const ids = [currentUserId, withUserId].sort().join("-");
        currentChatPath = `chats/private/${ids}`;
        document.getElementById("chat-title").innerText = `Chat v·ªõi ${withUserName}`;
        listenForMessages();

        const badge = document.getElementById("badge-" + withUserId);
        if (badge) {
            badge.style.display = "none";
            badge.textContent = "0";
        }
    };

    window.sendMessage = function () {
        const input = document.getElementById("chat-input");
        const message = input.value.trim();
        if (!message) return;

        db.ref(currentChatPath).push({
            senderId: currentUserId,
            senderName: currentUserName,
            content: message,
            timestamp: new Date().toISOString()
        });

        input.value = "";
    };

    function listenForMessages() {
        const msgBox = document.getElementById("chat-messages");
        msgBox.innerHTML = "";
        db.ref(currentChatPath).off();

        db.ref(currentChatPath).on("child_added", (snapshot) => {
            const msg = snapshot.val();
            const div = document.createElement("div");
            div.innerHTML = `<b>${msg.senderName}:</b> ${msg.content}`;
            msgBox.appendChild(div);
            msgBox.scrollTop = msgBox.scrollHeight;

            // Badge hi·ªÉn th·ªã n·∫øu l√† tin nh·∫Øn ri√™ng t·ª´ ng∆∞·ªùi kh√°c
            if (msg.senderId !== currentUserId && currentChatPath.includes("private")) {
                const ids = currentChatPath.split("/").pop().split("-");
                const friendId = ids.find(id => id !== currentUserId);
                const badge = document.getElementById("badge-" + friendId);
                if (badge) {
                    let count = parseInt(badge.textContent || "0");
                    badge.textContent = count + 1;
                    badge.style.display = "inline-block";
                }
            }
        });
    }

    window.loadClassmates = async function () {
        const container = document.getElementById("user-list-container");
        container.innerHTML = "ƒêang t·∫£i...";
        const classGroups = {};

        const snapshot = await db.ref("users").once("value");
        snapshot.forEach(child => {
            const user = child.val();
            if (user.userId === currentUserId || user.role !== "student") return;

            const isSameClass = teacherClassIds.includes(user.classId);
            if (isSameClass) {
                if (!classGroups[user.classId]) classGroups[user.classId] = [];
                classGroups[user.classId].push(user);
            }
        });

        container.innerHTML = "";

        for (const classId in classGroups) {
            const classDiv = document.createElement("div");
            classDiv.innerHTML = `<strong>L·ªõp ${classId}</strong>`;
            container.appendChild(classDiv);

            for (const user of classGroups[classId]) {
                const userDiv = document.createElement("div");
                userDiv.style.marginLeft = "10px";

                const statusSnap = await db.ref(`presence/online/${user.userId}`).once("value");
                const online = statusSnap.exists();
                userDiv.innerHTML = `
                    <a href="#" onclick="openPrivateChat('${user.userId}', '${user.name}')">
                        <span style="color:${online ? 'green' : 'gray'}">‚óè</span> ${user.name}
                        <span id="badge-${user.userId}" style="background:red; color:white; border-radius:10px; padding:0 6px; font-size:12px; margin-left:5px; display:none;">0</span>
                    </a>
                `;
                container.appendChild(userDiv);
            }
        }
    };
</script>

</body>
</html>
