@{
    var teacherName = ViewData["TeacherName"]?.ToString() ?? "Gi·∫£ng vi√™n"; // Changed default to Vietnamese
    var teacherAvatar = ViewData["TeacherAvatar"]?.ToString() ?? "";
}
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - L&T Education</title>
    <link rel="stylesheet" href="~/css/site-teacher.css" asp-append-version="true" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

      @RenderSection("Styles", required: false)
    
</head>
<!-- Firebase SDK -->
<script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-database-compat.js"></script>

<!-- Chat Box UI -->
<div id="chat-popup" style="position:fixed; bottom:20px; right:20px; width:300px; background:#fff; border:1px solid #ccc; border-radius:8px; display:none; z-index:9999;">
    <div style="background:#007bff; color:white; padding:8px; border-top-left-radius:8px; border-top-right-radius:8px;">
        <span id="chat-title">Chat</span>
        <button onclick="toggleChat()" style="float:right; background:transparent; border:none; color:white;">√ó</button>
    </div>
    <div id="chat-messages" style="height:250px; overflow-y:auto; padding:10px;"></div>
    <div style="padding:8px;">
        <input type="text" id="chat-input" placeholder="G·ª≠i tin nh·∫Øn..." style="width:80%;" />
        <div id="classmates-list" style="padding:8px; max-height:100px; overflow-y:auto; border-top:1px solid #ccc;">
    <strong>B·∫°n c√πng l·ªõp:</strong>
    <div id="user-list-container"></div>
</div>

        <button onclick="sendMessage()" style="width:18%;">G·ª≠i</button>
    </div>
</div>

<!-- Chat Toggle Button -->
<button onclick="toggleChat()" style="position:fixed; bottom:20px; right:20px; z-index:9998; background:#007bff; color:white; padding:10px 15px; border:none; border-radius:50%;">
    üí¨
</button>

<script>
    const currentUserId = '@(Context.Session.GetString("StudentId") ?? Context.Session.GetString("TeacherId") ?? "admin")';
    const currentUserName = '@(Context.Session.GetString("StudentName") ?? Context.Session.GetString("TeacherName") ?? "Admin")';
    const userRole = '@(Context.Session.GetString("StudentId") != null ? "student" : (Context.Session.GetString("TeacherId") != null ? "teacher" : "admin"))';
const classId = '@(Context.Session.GetString("StudentClass") ?? Context.Session.GetString("TeacherClass"))';
// N·∫øu teacher d·∫°y nhi·ªÅu l·ªõp ‚Üí danh s√°ch l∆∞u t·∫°i Session
const teacherClassList = @(Context.Session.GetString("TeacherClasses") ?? "[]");
const teacherClassIds = JSON.parse(teacherClassList); 



    // Firebase config
    const firebaseConfig = {
        apiKey: "AIzaSyD...",
        authDomain: "ielts-7d51b.firebaseapp.com",
        databaseURL: "https://ielts-7d51b-default-rtdb.asia-southeast1.firebasedatabase.app/",
        projectId: "ielts-7d51b",
        storageBucket: "ielts-7d51b.appspot.com",
        messagingSenderId: "xxxxxxxxxx",
        appId: "1:xxxx:web:xxxx"
    };
    firebase.initializeApp(firebaseConfig);
    // T·ª± ƒë·ªông l∆∞u user v√†o Firebase Database
firebase.database().ref("users/" + currentUserId).set({
    userId: currentUserId,
    name: currentUserName,
    role: userRole,
    classId: classId
});

// ƒê√°nh d·∫•u user online
firebase.database().ref("presence/online/" + currentUserId).set(true);
firebase.database().ref("presence/online/" + currentUserId).onDisconnect().remove();

    const db = firebase.database();

    let currentChatPath = ""; // Will be 'chats/class/10' or 'chats/private/user1-user2'

    function toggleChat() {
    const popup = document.getElementById("chat-popup");
    const isVisible = popup.style.display === "block";
    popup.style.display = isVisible ? "none" : "block";

    if (!isVisible) {
        if (currentChatPath === "") openClassChat(); // default
        loadClassmates(); // Load danh s√°ch b·∫°n
    }
}

function loadClassmates() {
    const container = document.getElementById("user-list-container");
    container.innerHTML = "ƒêang t·∫£i...";

    db.ref("users")
        .once("value")
        .then(snapshot => {
            container.innerHTML = "";

            const classGroups = {}; // { classId: [students...] }

            snapshot.forEach(child => {
                const user = child.val();
                if (user.userId === currentUserId) return;
                if (user.role !== "student") return;

                if (teacherClassIds.includes(user.classId)) {
                    if (!classGroups[user.classId]) classGroups[user.classId] = [];
                    classGroups[user.classId].push(user);
                }
            });

            // Hi·ªÉn th·ªã theo t·ª´ng l·ªõp
            for (const classId in classGroups) {
                const classDiv = document.createElement("div");
                classDiv.innerHTML = `<strong>L·ªõp ${classId}</strong>`;
                container.appendChild(classDiv);

                classGroups[classId].forEach(user => {
                    const userDiv = document.createElement("div");
                    userDiv.style.marginLeft = "10px";

                    const statusRef = db.ref("presence/online/" + user.userId);
                    statusRef.once("value", snap => {
                        const online = snap.exists();
                        userDiv.innerHTML = `
                            <a href="#" onclick="openPrivateChat('${user.userId}', '${user.name}')">
                                <span style="color:${online ? 'green' : 'gray'}">‚óè</span> ${user.name}
                                <span id="badge-${user.userId}" style="background:red; color:white; border-radius:10px; padding:0 6px; font-size:12px; margin-left:5px; display:none;">0</span>
                            </a>
                        `;
                        container.appendChild(userDiv);
                    });
                });
            }
        });
}


   function openClassChat() {
    currentChatPath = `chats/class/${classId}`;
    const roleLabel = userRole === 'teacher' ? "L·ªõp ƒëang d·∫°y" : "L·ªõp";
    document.getElementById("chat-title").innerText = `${roleLabel} ${classId}`;
    listenForMessages();
}


   function openPrivateChat(withUserId, withUserName) {
    const ids = [currentUserId, withUserId].sort().join("-");
    currentChatPath = `chats/private/${ids}`;
    document.getElementById("chat-title").innerText = `Chat v·ªõi ${withUserName}`;
    listenForMessages();

    const badge = document.getElementById("badge-" + withUserId);
    if (badge) {
        badge.style.display = "none";
        badge.textContent = "0";
    }
}


    function sendMessage() {
        const input = document.getElementById("chat-input");
        const message = input.value.trim();
        if (!message) return;

        db.ref(currentChatPath).push({
            senderId: currentUserId,
            senderName: currentUserName,
            content: message,
            timestamp: new Date().toISOString()
        });

        input.value = "";
    }

    function listenForMessages() {
    const msgBox = document.getElementById("chat-messages");
    msgBox.innerHTML = "";
    db.ref(currentChatPath).off();

    db.ref(currentChatPath).on("child_added", (snapshot) => {
        const msg = snapshot.val();
        const div = document.createElement("div");
        div.innerHTML = `<b>${msg.senderName}:</b> ${msg.content}`;
        msgBox.appendChild(div);
        msgBox.scrollTop = msgBox.scrollHeight;

        // TƒÉng badge n·∫øu l√† tin nh·∫Øn ri√™ng v√† ng∆∞·ªùi g·ª≠i kh√¥ng ph·∫£i m√¨nh
        if (msg.senderId !== currentUserId && currentChatPath.includes("private")) {
            const ids = currentChatPath.split("/").pop().split("-");
            const friendId = ids.find(id => id !== currentUserId);
            const badge = document.getElementById("badge-" + friendId);
            if (badge) {
                let count = parseInt(badge.textContent || "0");
                badge.textContent = count + 1;
                badge.style.display = "inline-block";
            }
        }
    });
}

</script>


<body>
    <header class="main-header"> @* Added main-header class for consistency *@
        <div class="top-bar">
            <div class="container">
                <span class="welcome-text">
                    <i class="fa-regular fa-user"></i> Xin ch√†o, @teacherName!
                </span>
                <div class="user-info"> @* Added user-info div *@
                    @if (!string.IsNullOrEmpty(teacherAvatar))
                    {
                        <img src="@teacherAvatar" alt="Avatar" class="avatar-img" />
                    }
                    else
                    {
                        <div class="user-avatar">@(teacherName.Length > 1 ? teacherName.Substring(0, 2).ToUpper() : "GV")</div>
                    }
                    <a href="/User/Teachers/Profile">H·ªì s∆°</a> @* Link to teacher profile *@
                    <a href="/User/Teachers/Logout">ƒêƒÉng xu·∫•t</a> @* Link to logout *@
                </div>
            </div>
        </div>
        <nav class="header-nav">
            <div class="container">
                <div class="logo">
                    <a href="/User/Teachers/Index">
                        <img src="~/images/lt_logo.png" alt="L&T Education Logo">
                        <span>H·ªÜ TH·ªêNG GI·∫¢NG VI√äN</span>
                    </a>
                </div>
                <div class="header-controls">
                    <a href="#"><i class="fas fa-bell"></i></a>
                    <a href="/User/Teachers/Profile"><i class="fas fa-cog"></i></a> @* Link cog to profile settings *@
                </div>
            </div>
        </nav>
    </header>
    <main class="main-content">
        @RenderBody()
    </main>
    <footer class="footer">
        <div class="container">
            <p>¬© 2025 L&T Education. All rights reserved.</p>
        </div>
    </footer>
    @RenderSection("Scripts", required: false)
</body>
</html>