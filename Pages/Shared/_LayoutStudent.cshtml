@{
    var studentName = ViewData["StudentName"]?.ToString() ?? "Student";
    var studentAvatar = ViewData["StudentAvatar"]?.ToString() ?? "";
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"] - L&T Education</title>
    <link rel="stylesheet" href="~/css/site-student.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    @RenderSection("Styles", required: false)
</head>
<body>

<!-- Chat Popup -->
<div id="chat-popup" style="position:fixed; bottom:20px; right:20px; width:300px; background:#fff; border:1px solid #ccc; border-radius:8px; display:none; z-index:9999;">
    <div style="background:#007bff; color:white; padding:8px; border-top-left-radius:8px; border-top-right-radius:8px;">
        <span id="chat-title">Chat</span>
        <button id="back-to-class-btn" onclick="openClassChat()" style="display:none; background:transparent; border:none; color:white; font-size:14px; margin-left:10px;">‚¨Ö Quay l·∫°i l·ªõp</button>
        <button onclick="toggleChat()" style="float:right; background:transparent; border:none; color:white;">√ó</button>
    </div>
    <div id="chat-messages" style="height:250px; overflow-y:auto; padding:10px;"></div>
    <div style="padding:8px;">
        <input type="text" id="chat-input" placeholder="G·ª≠i tin nh·∫Øn..." style="width:80%;" />
        <button onclick="sendMessage()" style="width:18%;">G·ª≠i</button>
        <div id="classmates-list" style="margin-top:8px; max-height:100px; overflow-y:auto; border-top:1px solid #ccc; padding-top:6px;">
            <strong>B·∫°n c√πng l·ªõp:</strong>
            <div id="user-list-container"></div>
        </div>
    </div>
</div>

<!-- Chat Toggle Button -->
<button onclick="toggleChat()" style="position:fixed; bottom:20px; right:20px; z-index:9998; background:#007bff; color:white; padding:10px 15px; border:none; border-radius:50%;">
    üí¨
</button>

<!-- HEADER -->
<header>
    <div class="top-bar">
        <div class="container">
            <span class="welcome-text"><i class="fa-regular fa-user"></i> Hi, @studentName!</span>
            <div class="user-info">
                @if (!string.IsNullOrEmpty(studentAvatar))
                {
                    <img src="@studentAvatar" alt="Avatar" class="avatar-img" />
                }
                else
                {
                    <div class="user-avatar">@(studentName.Length > 1 ? studentName.Substring(0, 2).ToUpper() : "SD")</div>
                }
                <a href="/User/Students/Profile" title="Th√¥ng tin c√° nh√¢n" style="margin-left:8px;">
                    <i class="fas fa-user-circle"></i> H·ªì s∆°
                </a>
            </div>
        </div>
    </div>

    <nav class="header-nav">
        <div class="container">
            <div class="logo">
                <a href="/">
                    <img src="~/images/lt_logo.png" alt="L&T Education Logo">
                    <span>H·ªÜ TH·ªêNG H·ªåC TR·ª∞C TUY·∫æN</span>
                </a>
            </div>
            <div class="header-controls">
                <a href="#" class="lang-select"><i class="fas fa-globe"></i>Vietnamese (VI)</a>
                <a href="#"><i class="fas fa-bell"></i></a>
                <a href="#"><i class="fas fa-cog"></i></a>
            </div>
        </div>
    </nav>
</header>

<!-- BODY CONTENT -->
<main class="main-content">
    @RenderBody()
</main>

<!-- FOOTER -->
<footer class="footer">
    <div class="container">
        <p>¬© 2025 L&T Education. All rights reserved. | 
            <a href="#" style="color: white;">Ch√≠nh s√°ch b·∫£o m·∫≠t</a>
        </p>
    </div>
</footer>

<!-- Firebase SDK -->
<script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-database-compat.js"></script>

<script>
    const currentUserId = '@(Context.Session.GetString("StudentId") ?? Context.Session.GetString("TeacherId") ?? "admin")';
    const currentUserName = '@(Context.Session.GetString("StudentName") ?? Context.Session.GetString("TeacherName") ?? "Admin")';
    const userRole = '@(Context.Session.GetString("StudentId") != null ? "student" : (Context.Session.GetString("TeacherId") != null ? "teacher" : "admin"))';
    const classId = '@Context.Session.GetString("StudentClass")';

    const firebaseConfig = {
        apiKey: "AIzaSyD...",
        authDomain: "ielts-7d51b.firebaseapp.com",
        databaseURL: "https://ielts-7d51b-default-rtdb.asia-southeast1.firebasedatabase.app/",
        projectId: "ielts-7d51b",
        storageBucket: "ielts-7d51b.appspot.com",
        messagingSenderId: "xxx",
        appId: "xxx"
    };

    firebase.initializeApp(firebaseConfig);
    const db = firebase.database();

    firebase.database().ref("users/" + currentUserId).set({
        userId: currentUserId,
        name: currentUserName,
        role: userRole,
        classId: classId
    });

    firebase.database().ref("presence/online/" + currentUserId).set(true);
    firebase.database().ref("presence/online/" + currentUserId).onDisconnect().remove();

    let currentChatPath = "";

    function toggleChat() {
        const popup = document.getElementById("chat-popup");
        const isVisible = popup.style.display === "block";
        popup.style.display = isVisible ? "none" : "block";

        if (!isVisible) {
            if (!currentChatPath) openClassChat(); // default
            loadClassmates();
        }
    }

    function openClassChat() {
        currentChatPath = `chats/class/${classId}`;
        document.getElementById("chat-title").innerText = `L·ªõp ${classId}`;
        document.getElementById("back-to-class-btn").style.display = "none";
        listenForMessages();
    }

    function openPrivateChat(withUserId, withUserName) {
        const ids = [currentUserId, withUserId].sort().join("-");
        currentChatPath = `chats/private/${ids}`;
        document.getElementById("chat-title").innerText = `Chat v·ªõi ${withUserName}`;
        document.getElementById("back-to-class-btn").style.display = "inline-block";
        listenForMessages();

        const badge = document.getElementById("badge-" + withUserId);
        if (badge) {
            badge.style.display = "none";
            badge.textContent = "0";
        }
    }

   function loadClassmates() {
    const listContainer = document.getElementById("user-list-container");
    listContainer.innerHTML = "ƒêang t·∫£i...";

    db.ref("users")
        .orderByChild("classId")
        .equalTo(classId)
        .once("value")
        .then(snapshot => {
            listContainer.innerHTML = "";

            snapshot.forEach(child => {
                const user = child.val();
                if (user.userId === currentUserId) return;

                const userDiv = document.createElement("div");
                userDiv.style.marginBottom = "6px";

                db.ref("presence/online/" + user.userId)
                    .once("value", snap => {
                        const online = snap.exists();
                        const badgeId = `badge-${user.userId}`;

                        userDiv.innerHTML = `
                            <a href="#" onclick="openPrivateChat('${user.userId}', '${user.name}')">
                                <span style="color:${online ? 'green' : 'gray'}">‚óè</span>
                                ${user.name} ${user.role === 'teacher' ? '(GV)' : ''}
                                <span id="${badgeId}" class="chat-badge">0</span>
                            </a>
                        `;
                        listContainer.appendChild(userDiv);
                    });
            });
        });
}
let currentListeningPath = "";


   function sendMessage() {
    const input = document.getElementById("chat-input");
    const message = input.value.trim();
    if (!message) return;

    db.ref(currentChatPath).push({
        senderId: currentUserId,
        senderName: currentUserName,
        content: message,
        timestamp: new Date().toISOString()
    });

    input.value = "";

    // ƒê·∫£m b·∫£o chat lu√¥n stream ƒë√∫ng ƒëo·∫°n chat
    if (currentListeningPath !== currentChatPath) {
        listenForMessages();
    }
}

    function showNewMessagePopup(senderName, message) {
    const notif = document.createElement("div");
    notif.innerHTML = `<b>${senderName}:</b> ${message}`;
    notif.style.position = "fixed";
    notif.style.bottom = "80px";
    notif.style.right = "20px";
    notif.style.background = "#007bff";
    notif.style.color = "white";
    notif.style.padding = "10px";
    notif.style.borderRadius = "10px";
    notif.style.boxShadow = "0 2px 6px rgba(0,0,0,0.3)";
    notif.style.zIndex = 9999;

    document.body.appendChild(notif);
    setTimeout(() => notif.remove(), 4000);
}


 function listenForMessages() {
    const msgBox = document.getElementById("chat-messages");
    msgBox.innerHTML = "";

    // Ng·∫Øt l·∫Øng nghe c≈© n·∫øu c√≥
    if (currentListeningPath) {
        db.ref(currentListeningPath).off();
    }

    // B·∫Øt ƒë·∫ßu l·∫Øng nghe ƒëo·∫°n m·ªõi
    db.ref(currentChatPath).on("child_added", (snapshot) => {
        const msg = snapshot.val();
        const chatPopup = document.getElementById("chat-popup");

        // N·∫øu chat ƒëang ƒë√≥ng v√† tin nh·∫Øn t·ª´ ng∆∞·ªùi kh√°c -> hi·ªán popup
        if (chatPopup.style.display === "none" && msg.senderId !== currentUserId) {
            showNewMessagePopup(msg.senderName, msg.content);
        }

        // Hi·ªÉn th·ªã tin nh·∫Øn
        const div = document.createElement("div");
        div.innerHTML = `<b>${msg.senderName}:</b> ${msg.content}`;
        msgBox.appendChild(div);
        msgBox.scrollTop = msgBox.scrollHeight;

        // C·∫≠p nh·∫≠t badge tin nh·∫Øn ch∆∞a ƒë·ªçc
        if (msg.senderId !== currentUserId && currentChatPath.includes("private")) {
            const ids = currentChatPath.split("/").pop().split("-");
            const friendId = ids.find(id => id !== currentUserId);
            const badge = document.getElementById("badge-" + friendId);
            if (badge) {
                let count = parseInt(badge.textContent || "0");
                badge.textContent = count + 1;
                badge.style.display = "inline-block";
            }
        }
    });

    currentListeningPath = currentChatPath;
}



    // Auto open chat l·ªõp sau ƒëƒÉng nh·∫≠p
    window.onload = () => {
        openClassChat();
    };
</script>

@RenderSection("Scripts", required: false)

</body>
</html>
