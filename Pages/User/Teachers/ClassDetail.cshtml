@page
@model api.Pages.User.Teachers.ClassDetailModel
@{
    ViewData["Title"] = "Chi ti·∫øt l·ªõp";
    Layout = "~/Pages/Shared/_LayoutTeacher.cshtml";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<style>
    body {
        background-color: #f8fbff;
    }

    .card-title {
        font-weight: 600;
        color: #0d6efd;
    }

    .student-row:hover {
        background-color: #f0f8ff !important;
        transition: background-color 0.2s ease-in-out;
    }

    .score-badge {
        font-size: 0.95rem;
    }

    .table thead th {
        background-color: #e7f1ff;
        color: #0d6efd;
    }

    .btn-primary {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

    .page-item.active .page-link {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

    #searchBox, #filterName {
        background-image: url('https://cdn-icons-png.flaticon.com/512/54/54481.png');
        background-repeat: no-repeat;
        background-position: 8px center;
        background-size: 18px;
        padding-left: 35px;
    }
    .filter-box {
        margin-top: 20px;
    }

    .filter-box label {
        font-weight: bold;
        color: #007bff;
        display: block;
        margin-bottom: 6px;
    }

    .filter-inputs {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 15px;
    }

    .filter-inputs input {
        padding: 6px;
        width: 160px;
    }

    .btn {
        padding: 6px 12px;
        border: none;
        border-radius: 5px;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 15px;
    }

    .table th,
    .table td {
        padding: 10px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    .student-info {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .avatar-sm {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        object-fit: cover;
    }
</style>

<div class="container mt-4">
    <!-- Header -->
    <div class="card shadow-sm mb-4 border-start border-4 border-primary">
        <div class="card-body">
            <h2 class="card-title mb-1">üìò L·ªõp: @Model.Class.Name</h2>
            <p class="card-subtitle text-muted">M√£ l·ªõp: <strong>@Model.Class.ClassId</strong></p>
        </div>
    </div>
    <!-- B·ªô l·ªçc n√¢ng cao -->
   <div class="filter-box">
    <label><i class="bi bi-filter-circle text-danger"></i> B·ªô l·ªçc sinh vi√™n</label>
    <div class="filter-inputs">
        <input type="text" placeholder="üîç T√™n sinh vi√™n..." name="name" class="form-control" />
        <input type="number" placeholder="ƒêi·ªÉm t·ª´" name="minScore" class="form-control" />
        <input type="number" placeholder="ƒêi·ªÉm t·ªõi" name="maxScore" class="form-control" />
        <button class="btn btn-primary"><i class="bi bi-funnel-fill"></i> L·ªçc</button>
        <button class="btn btn-secondary"><i class="bi bi-arrow-repeat"></i> ƒê·∫∑t l·∫°i</button>
    </div>
</div>


    <!-- B·∫£ng sinh vi√™n -->
   <h4 class="mt-4"><i class="bi bi-person-lines-fill"></i> Danh s√°ch sinh vi√™n</h4>
<table class="table student-table">
    <thead class="table-primary">
        <tr>
            <th>M√£ SV</th>
            <th>H·ªç t√™n</th>
            <th>Email</th>
            <th>ƒêi·ªÉm TB
                <a href="?sort=asc" class="text-decoration-none">‚Üë</a>
                <a href="?sort=desc" class="text-decoration-none">‚Üì</a>
            </th>
            <th>H√†nh ƒë·ªông</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var student in Model.Students)
        {
            <tr>
                <td>@student.StudentId</td>
                <td class="student-info">
                    <img src="@student.Avatar" class="avatar-sm" alt="avatar" />
                    <span>@student.Name</span>
                </td>
                <td>@student.Email</td>
                <td>@student.Score.ToString("F2")</td>
                <td>
    <button class="btn btn-outline-info btn-sm"
            onclick="openResultModal('@student.StudentId', '@student.Name')">
        üìà Xem k·∫øt qu·∫£
    </button>
</td>

            </tr>
        }
    </tbody>
</table>
</div>
<!-- Modal xem k·∫øt qu·∫£ -->
<div class="modal fade" id="resultModal" tabindex="-1" aria-labelledby="resultModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">üìä K·∫øt qu·∫£ chi ti·∫øt c·ªßa sinh vi√™n: <span id="modalStudentName"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="ƒê√≥ng"></button>
            </div>
            <div class="modal-body">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>ƒê·ªÅ thi</th>
                            <th>ƒêi·ªÉm</th>
                            <th>T·ªïng ƒëi·ªÉm</th>
                            <th>Nh·∫≠n x√©t</th>
                            <th>Th·ªùi gian</th>
                        </tr>
                    </thead>
                    <tbody id="resultTableBody"></tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button id="updateAverageBtn" class="btn btn-success">C·∫≠p nh·∫≠t ƒëi·ªÉm trung b√¨nh</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ƒê√≥ng</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
    let selectedStudentId = null;

    async function openResultModal(studentId, studentName) {
        selectedStudentId = studentId;
        document.getElementById("modalStudentName").textContent = studentName;

        const response = await fetch(`/api/Result/student/${studentId}/detailed`);
        const data = await response.json();

        const tbody = document.getElementById("resultTableBody");
        tbody.innerHTML = "";

        data.forEach(r => {
            const row = `
                <tr>
                    <td>${r.examTitle}</td>
                    <td>${r.score}</td>
                    <td>${r.totalScore}</td>
                    <td>${r.remark || ""}</td>
                    <td>${new Date(r.timestamp).toLocaleString()}</td>
                </tr>`;
            tbody.innerHTML += row;
        });

        new bootstrap.Modal(document.getElementById('resultModal')).show();
    }

    document.getElementById("updateAverageBtn").addEventListener("click", async () => {
        if (!selectedStudentId) return;

        const res = await fetch(`/api/Result/student/${selectedStudentId}/average/update`, {
            method: "POST"
        });

        if (res.ok) {
            alert("‚úÖ ƒê√£ c·∫≠p nh·∫≠t ƒëi·ªÉm trung b√¨nh th√†nh c√¥ng!");
            location.reload(); // reload l·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t ƒëi·ªÉm m·ªõi
        } else {
            const msg = await res.text();
            alert("‚ùå L·ªói khi c·∫≠p nh·∫≠t: " + msg);
        }
    });
</script>

<script>
    const allStudents = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Students.Select(s => new {
        studentId = s.StudentId,
        name = s.Name,
        email = s.Email,
        avatar = s.Avatar,
        score = s.Score
    })));

    let currentPage = 1;
    const itemsPerPage = 5;

    function applyFiltersAndRender() {
        const name = document.getElementById('filterName').value.toLowerCase();
        const minScore = parseFloat(document.getElementById('filterMinScore').value) || 0;
        const maxScore = parseFloat(document.getElementById('filterMaxScore').value) || 10;

        const filtered = allStudents.filter(s =>
            s.name.toLowerCase().includes(name) &&
            s.score >= minScore && s.score <= maxScore
        );

        renderTable(filtered);
        renderPagination(filtered);
    }

    function renderTable(data) {
        const start = (currentPage - 1) * itemsPerPage;
        const end = start + itemsPerPage;
        const rows = data.slice(start, end).map(s => `
            <tr class="student-row">
                <td>${s.studentId}</td>
                <td><img src="${s.avatar}" class="rounded-circle me-2" width="32" height="32" /> ${s.name}</td>
                <td>${s.email}</td>
                <td><span class="badge bg-primary score-badge">${s.score.toFixed(2)}</span></td>
                <td><a href="/User/Teachers/StudentScore?studentId=${s.studentId}" class="btn btn-outline-info btn-sm">Xem ƒëi·ªÉm</a></td>
            </tr>
        `).join('');
        document.getElementById('studentBody').innerHTML = rows;
    }

    function renderPagination(data) {
        const pageCount = Math.ceil(data.length / itemsPerPage);
        let paginationHTML = '';
        for (let i = 1; i <= pageCount; i++) {
            paginationHTML += `
                <li class="page-item ${i === currentPage ? 'active' : ''}">
                    <a class="page-link" href="#" onclick="changePage(${i}); return false;">${i}</a>
                </li>`;
        }
        document.getElementById('pagination').innerHTML = paginationHTML;
    }

    function changePage(page) {
        currentPage = page;
        applyFiltersAndRender();
    }

    document.getElementById('applyFilter').addEventListener('click', () => {
        currentPage = 1;
        applyFiltersAndRender();
    });

    document.getElementById('resetFilter').addEventListener('click', () => {
        document.getElementById('filterName').value = '';
        document.getElementById('filterMinScore').value = '';
        document.getElementById('filterMaxScore').value = '';
        currentPage = 1;
        applyFiltersAndRender();
    });

    document.getElementById("sortAsc").onclick = () => {
        allStudents.sort((a, b) => a.score - b.score);
        applyFiltersAndRender();
    };

    document.getElementById("sortDesc").onclick = () => {
        allStudents.sort((a, b) => b.score - a.score);
        applyFiltersAndRender();
    };

    // Chart.js
    const ctx = document.getElementById("scoreChart").getContext("2d");
    const labels = allStudents.map(s => s.name);
    const data = allStudents.map(s => s.score);

    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'ƒêi·ªÉm trung b√¨nh',
                data: data,
                backgroundColor: 'rgba(54, 162, 235, 0.7)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }]
        },
        options: {
            plugins: {
                legend: { display: false }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    max: 10
                }
            }
        }
    });

    // Init render
    applyFiltersAndRender();
</script>
}
